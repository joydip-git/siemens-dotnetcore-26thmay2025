github repository link:
https://github.com/joydip-git/siemens-dotnetcore-26thmay2025

s/w:
-------------
Visual Studio 2022 [17.14]
Visual Studio Code
SQl Server ...
.net core 
	STS => Standard Term Support [odd] => 9 
	LTS => Long Term Support [even] => 8.0.404

.net framework: (2002 -> last version 4.8 - 2019)
	licensed
	library: .net framework class library
	runtime: Common Language Runtime
	web tech: ASP.NET
	data access tech: ADO.NET and Entity Framework

.net core (since 2016)
	1.0 -> 3.1
	.NET 5.0, 6.0, 7.0, 8.0, 9.0, 10.0
	open source
	cross-platform
	official website [for packages]: nuget.org (source code - github)
	ready to be containerized
	CLI tool: dotnet
	compiler: Roslyn [for C# and VB]
	library: .net core library [smaller and modular]
	runtime:
		.NET runtime [only console apps can run] - any machine
		ASP.NET Core runtime [for web apps] - any machine
		.NET Desktop runtime [WPF, WinForm type apps] - ONLY for Windows machines
		
	web tech: ASP.NET Core
	data access tech: ADO.NET and Entity Framework Core

.NET/.NET Core features:
-----------------------------------
	built-in DI 
	built-in support reading configuration data from different files
	built-in support for logging
	built-in Hosting feature
	graceful shutdown
	etc.

C# programming language:
	1.0 - 8.0: .net framework + .net core/.net
	9.0 - 13.0: .net core/.net

.net framework:
executable app - with Main method in a class  (console app) -> compiler -> output file (*.exe)
non-executable app -without Main method in any class (class library, web app) -> compiler -> output file (*.dll)


.net:
executable app - with Main method in a class  (console app) -> compiler -> output file (*.dll) + host app (*.exe)
non-executable app -without Main method in any class (class library, web app) -> compiler -> output file (*.dll)

output file: (assembly)
-------------------------------
1. Intermediate Language (IL) Code
2. Assembly Metadata/Manifest -> information about the application (dependencies, module information, author, copyright, security etc.)
3. Type Metadata/Metainfo -> metadata about all the types (classes, interfaces etc.) declared in your application
4. Headers:
	CLR Header: a header value (32/64 bit) indicating that your application is targetted for .Net particular version (8/9 etc.)
	Windows Header (optional): a header value (32/64 bit) indicating which O/S DLLs are required for the app to run

view the assesmbly: ILDASM (Intermediate Language Dis-Assembler)
path: C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\ildasm.exe

IL code uses single unified type system known as - common type system  (CTS)

runtime:
------------------------------------
click the exe file (host)
a process starts
the specific runtime (libraray - mscoreei.dll - MS Common Object Runtime Execution Engine Interface) is loaded in the process
an App Domain is created in the process
then the output file is loaded in the process memory (in the App Domain)
then the IL code of output file is converted to binary code by Just-i-Time compiler
then the execution begins from Main method

C#:
------------
object-oriented programming language
case-sensitive
type-safe
etc.

data types:
	value type			reference type
------------------------------------------------------------------
built-in	user-defined		built-in 	user-defined
--------------------------------------------------------------------
byte		struct, enum		string, Object	class
sbyte							interface
short [Int16]						delegate
ushort							event
int [Int32]
uint
long [Int64]
ulong

float   float f = 12.34F;
decimal decimal d = 12.34M;
double  double d1 = 12.34D;

char
bool [Boolean]

Nullable value type
Nullable reference type
null coalesce operator
null propagation

operators:
	
control flow statements:

blank sol: Siemens.DotNetCore.MessengerApp

library: Siemens.DotNetCore.MessengerApp.Logic

Adding Project reference in .NET Core:
1. in the solution explorer right click on the project name
project name>Add>Project Reference from the context menu

2. Manually add project reference in .csproj file
	<ItemGroup>
		<ProjectReference Include="<path-to-target-project-csproj-file>" />
	</ItemGroup>

3. using dotnet CLI:
	>dotnet add reference <path-to-target-project-csproj-file>

DOTNET CLI commands:
to restore the dependencies of a project (an app)
	>dotnet restore
to compile a project (an app)
	>dotnet build
to run a project (an app)
	>dotnet run
to add reference to a project (an app) from another project (an app)
	>dotnet add reference <path-to-target-project-csproj-file>


Conversion of one value to another:
----------------------------------------------
conversion source: string
converion target: int
int target = int.Parse(source)

conversion source: anything
converion target: int
int target = Convert.ToInt32(source) //"123" -> 123

Parse method can convert string to a target type
Convert class methods can convert (if possible) to target type


Debugging:
-----------------------------
1. Locals: displays all the variables local to the current method that is being debugged, whether you have already executed those lines or not where those local variables have been declared
2. Autos: displays the variables local to the current method that is being debugged,ONLY those you have already executed
3. watch: you can type the local variable names and then evaluate them
4. Quick Watch: you can right-click on a variable in the line currently being executed and from the context menu you will get this window

5. Command Window:  you can type the local variable names and then evaluate them
6. Immediate Window:  you can type the local variable names and then evaluate them

cw("enter dob");
datetime dob;
bool isPos = datetime.TryParse(crl(),out dob);
if(isPos)



Nullable Value Type:
-----------------------------
int x = null;

products
----------
id name price (decimal(18,2))
1  abcd NULL

int id = 1;
string name = "abcd";
//decimal price = NULL;<--incorrect

string str = null;
A obj = null;

//Nullable<decimal> price = null;
decimal? price = null;
price = 12.34M;

if(price.HasValue)
{
	c.wl(price.Value);
}

out keyword in C#:
------------------------------
int x = 10;
int y = 20;
int z;
Print(x, ref y, out z);



static void Print(int a, ref int b, out int c)
{
	a = 11;
	b = 21;
	z = 31;
}

Nullable reference type:
--------------------------
string? str = null;

A? obj = null;
if(obj != null)
	obj.Method();

obj?.Method(); //null propagation

pass by value
pass by reference: ref and out keyword
nameof() operator
record and tuple

tuple:
------------
static (int?,string) Calculate(....)
static (int? Result,string MethodName) Calculate(....)

record:
---------------
//declaration of a record
record CalulationResult(int? Result,string MethodName);

//using that record type as return value
static CalulationResult Calculate(....)

//Array arr = new IntArray(2);

int[] numbers = new int[2];

int[,] numbers = new int[2,3];

string[] names = {"anil","sunil"};
















	