class Person
{
	string name;
	string emailId;
	string location;
	long mobileNo;

	public Person()
	{
		
	}

	public Person(string name, string emailId, string location, long mobileNo):this()
	{
		this.name = name;
		.....	
	}
}

class Employee:Person
{
	decimal salary;
	public Employee()
	{
	}

	public Employee(string name, string emailId, string location, long mobileNo, decimal salary):base(name,emailId, location,mobileNo)
	{
		this.salary = salary;
	}
}

Employee p = new Employee("anil",.....);


Next Object Pointer (NOP) managed by the heap in .NET runtime

class access specifiers:
----------------------------
public: the class is accessible within the same app as well as from another app
internal (default): the class is accessible within the same app ONLY

readonly keyword:
--------------------
a data member declared with readonly keyword can be assigned ONLY through constructor

const keyword:
--------------------
const keyword can be used to 
	declare data member of a class 
	as well as local variable in method

const data does not have any memory allocation in runtime memory. the value is embeded in the assembly and fetched from there as "literal" value during runtime of the app.

const is by default static and is accessed with class name.

const data or variable MUST be assigned when they are declared

static keyword:
----------------------
static ctor: 
	this ctor can't be called from outside the clas or inside the class EXPLICITLY
	that's why it is not declared with any access specifier
	it can't be parameterized 
	which is called implicitly by runtime when you invoke any other constructor of that class
	this ctor is executed ONLY once in the application lifetime, either when the very first instance of that class is created or you access any other static member of the class for the very first time
	it is used to assign values to ONLY static members

static other members: data, method, property etc.
Note: 
static member can access ONLY other static member
whereas non-static (instance) member can access both other instance as well as static members



Note: accessing const data does not invoke the static ctor

binding: caller and called
line no: 8 -> line no: 5 

polymporphism:
----------------------
compile time:

method overloading and constructor oveloading:
	compiler determines which method will be invoked during runtime by looking at the signature of those methods where the methods do have some difference in the argument list:
1. number of arguments is different
2. data type of arguments is different
3. position of arguments is different 

operators:
	+ => string -> Concat

A => virtual void Foo(){}
B => overide void Foo(){}
C => overide void Foo(){}


Init only property, automatic property and object-initializer:
------------------------------------------------------------------
 object-initializer:

since Name property is decalred with "required" keyword that property value must be passed through object-initializer 

example: Employee emp = new Employee(1) { Name = "", BasicPayment = 1, DaPayment = 1, HraPayment = 1 };

Init-only property (such as Id) can be used in object-initializer or in the ctor of this class

 Employee emp = new Employee() { Name = "anil", Id = 1, BasicPayment = 1000, DaPayment = 1000, HraPayment = 1000 };
emp.Id = 2;<-Init-only property, can be set only once 


