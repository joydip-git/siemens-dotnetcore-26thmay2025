Data Access From Database in .NET 9:
-----------------------------------------
1. ActiveX Data Object.NET:
package: Microsoft.Data.SqlClient [for SQl Server]
>dotnet add package Microsoft.Data.SqlClient --version 6.0.2

2. Entity Framework Core (EF Core):
package: Microsoft.EntityFrameworkCore.SqlServer
>dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version <v-no>

ADO.NET:
	Common types for data access:
	package: System.Data.dll and System.Data.Common.dll
	namespaces: System.Data and System.Data.Common

	Data Provider classes
	Sql Server:
	namespace: Microsoft.Data.SqlClient
		SqlConnection
		SqlCommand
		SqlDataReader
		etc.
	Oracle:
	namespace: Microsoft.Data.SqlClient
		OracleConnection
		OracleCommand
		OracleDataReader

	etc.

Windows auth:
-----------------------
"Data Source=JOYDIP-PC\SQLEXPRESS;Integrated Security=True;Encrypt=False;Trust Server Certificate=True;initial catalog=siemensdb"
or
"server=JOYDIP-PC\SQLEXPRESS;database=siemensdb;Integrated Security=True;Encrypt=False;Trust Server Certificate=True;"

SQL Server auth:
------------------------
"server=JOYDIP-PC\SQLEXPRESS;database=siemensdb;user id=<>;password=<>;Encrypt=False;Trust Server Certificate=True;"
or
"server=JOYDIP-PC\SQLEXPRESS;database=siemensdb;uid=<>;pwd=<>;Encrypt=False;Trust Server Certificate=True;"


Command object methods:
------------------------------
to execute a Select query 
	a. returning multiple values: SqlDataReader ExecuteReader()
	a. returning single value: object ExecuteScaler()

to execute a non-Select query 
	int ExecuteNonQuery()


EF Core:
----------------------
1. Code First: set up a database and table(s) and then interact with them
2. Db First: helps you interact with an existing database and its tables

POCO: Plain Old CLR object
An entity which is tightly mapped to a table

Table Mapping:
1. through attributes/data annotations
2. through Fluent API


class House
{

}

class Builder
{
	House house = new();
	public Builder BuildAGarden(){//code return this;}
	public Builder BuildAPool(){}
	public Builder BuildAnotherFloor(){}
	public House Build(){ return house; }
}

static class BuilderExtension
{
	public static Builder BuildSomething(this Builder builder,...){}
}

Builder b = new ();
b
 .BuildAGarden()
 .BuildAPool();

House h =  b.Build();


.NET features:
--------------------------
Dependency Injection:
package: Microsoft.Extensions.DependencyInjection
	 Microsoft.Extensions.DependencyInjection.Abstractions

Service Lifetime:
	a. Singleton
	b. Scoped
	c. Transient

Configuration:
package: Microsoft.Extensions.Configuration
	 Microsoft.Extensions.Configuration.Abstractions

Hosting feature:
--------------------------------
Manage
	a. DI for your app
	b. Configuration for your app
	c. Logging of your app
	d. Managing object lifetime
	e. application shutdown, lifetime etc.

Generic Host:
	package: Microsoft.Extensions.Hosting
		 Microsoft.Extensions.Hosting.Abstractions

	
